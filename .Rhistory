# Using the read.csv function, assign the following data to a variable, dat:
# https://uoepsy.github.io/data/nurse_stress.csv
dat <- read.csv('https://uoepsy.github.io/data/nurse_stress.csv')
View(dat)
summary(dat)
setwd('../../Users/mtruelov/Desktop/PsychologicalResearchMethods/PRM/')
dat <- read.csv('Labs/Week1LabData.csv')
View(dat)
# Using the read.csv function, assign the following data to a variable, dat:
# https://uoepsy.github.io/data/nurse_stress.csv
dat <- read.csv('https://uoepsy.github.io/data/nurse_stress.csv')
summary(dat)
colnames(dat)
mean(dat$age)
sd(dat$age)
dat2 <- dat[dat$wardtype=='general care',]
View(dat2)
table(dat2$wardtype)
table(dat$wardtype)
lm(stress~experien, dat)
m1 <- lm(stress~experien, dat)
summary(m1)
m2 <- lm(stress~experien+hospsize, dat)
summary(m2)
m3 <- lm(stress~experien*hospsize, dat)
summary(m3)
rmarkdown:::site_skeleton(getwd())
file.create(".nojekyll")
rmarkdown::render_site()
shiny::runApp('Labs/normalDistribution')
normDist <- ggplot(data.frame(X = c(minVal, maxVal)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
library(ggplot2)
normDist <- ggplot(data.frame(X = c(minVal, maxVal)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
normDist <- ggplot(data.frame(X = c(-6, 6)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-6, 6)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-6, 6)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
options(htmltools.dir.version = FALSE)
normDist + geom_vline(xintercept = 0, color=accent2, linewidth = 1.5) +
stat_function(fun=dnorm, geom = "line", args = list(mean = 2), linewidth = 1.5, color = baseColor) +
stat_function(fun=dnorm, geom = "line", args = list(mean = -2), linewidth = 1.5, color = accent1) +
annotate(geom='text', label=paste0('mu == -2'), parse = T, x=-5, y=0.32, size = 6, colour = accent1, hjust = 0) +
annotate(geom='text', label=paste0('mu == 0'), parse = T, x=-5, y=0.35, size = 6, hjust = 0) +
annotate(geom='text', label=paste0('mu == 2'), parse = T, x=-5, y=0.38, size = 6, colour = baseColor, hjust = 0)
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=2), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=2, sd = 15), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=2, sd = 3), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=8, sd = 3), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=8, sd = 15), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=10, sd = 15), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
ggplot(data.frame(X = c(-60, 60)), aes(x = X)) +
stat_function(fun=dnorm, geom = "line", args = list(mean=10, sd = 5), linewidth = 1.5) +
theme(axis.title.x = element_text(size = 14, face = 'bold'),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank())
runApp('Labs/normalDistribution')
runApp('Labs/normalDistribution')
runApp('Labs/normalDistribution')
runApp('Labs/normalDistribution')
shinylive::export(appdir = "shinyApps", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
library(httpuv)
runStaticServer("docs")
runServer('docs')
runServer('docs/', port=8008)
runServer('docs/', port=8008, app = 'app.R')
install.packages(httpuv)
install.packages('httpuv')
install.packages("httpuv")
install.packages('httpuv')
runStaticServer("docs")
library('httpuv')
runStaticServer("docs")
